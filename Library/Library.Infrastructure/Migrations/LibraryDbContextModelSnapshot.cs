// <auto-generated />
using System;
using Library.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Book.Aggregate.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Common.Transaction.Aggregate.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatrionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PatrionId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Library.Domain.LibrarianPanel.Value_Object.Appeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatrionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("PatrionId")
                        .IsUnique();

                    b.ToTable("Appeals", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Patrion.Aggregate.Patrion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Patrion", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Book.Aggregate.Book", b =>
                {
                    b.OwnsMany("Library.Domain.Book.Value_Object.Review", "BookReviews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Descriptoin")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("PatrionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Rating")
                                .HasPrecision(3, 1)
                                .HasColumnType("decimal(3,1)");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId");

                            b1.ToTable("Review", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("BookReviews");
                });

            modelBuilder.Entity("Library.Domain.Common.Transaction.Aggregate.Transaction", b =>
                {
                    b.HasOne("Library.Domain.Book.Aggregate.Book", "Book")
                        .WithMany("BookTransactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Patrion.Aggregate.Patrion", "Patrion")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("PatrionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Library.Domain.Book.Value_Object.BorrowSpan", "Span", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DueDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("Due Date");

                            b1.Property<DateTime>("IssueDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("Issue Date");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Book");

                    b.Navigation("Patrion");

                    b.Navigation("Span");
                });

            modelBuilder.Entity("Library.Domain.LibrarianPanel.Value_Object.Appeal", b =>
                {
                    b.HasOne("Library.Domain.Book.Aggregate.Book", "Book")
                        .WithOne()
                        .HasForeignKey("Library.Domain.LibrarianPanel.Value_Object.Appeal", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Patrion.Aggregate.Patrion", "Patrion")
                        .WithOne()
                        .HasForeignKey("Library.Domain.LibrarianPanel.Value_Object.Appeal", "PatrionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Patrion");
                });

            modelBuilder.Entity("Library.Domain.Patrion.Aggregate.Patrion", b =>
                {
                    b.OwnsMany("Library.Domain.Patrion.Value_Object.BorrowedBook", "BookSet", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Genre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("PatrionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("Id");

                            b1.HasIndex("PatrionId");

                            b1.ToTable("BorrowedBook", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PatrionId");
                        });

                    b.Navigation("BookSet");
                });

            modelBuilder.Entity("Library.Domain.Book.Aggregate.Book", b =>
                {
                    b.Navigation("BookTransactions");
                });

            modelBuilder.Entity("Library.Domain.Patrion.Aggregate.Patrion", b =>
                {
                    b.Navigation("TransactionHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
